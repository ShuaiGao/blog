(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{383:function(t,e,a){"use strict";a.r(e);var s=a(4),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"go-mod-包管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#go-mod-包管理"}},[t._v("#")]),t._v(" go mod 包管理")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/136971647",target:"_blank",rel:"noopener noreferrer"}},[t._v("知乎 go.mod 各版本差异"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://xuanwo.io/2019/05/27/go-modules/",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客链接"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"_1-go-mod-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-go-mod-命令"}},[t._v("#")]),t._v(" 1. go mod 命令")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("go "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" mod\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("Usage:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("    go mod <command> [arguments]\n")])])]),e("p",[t._v("The commands are:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("    download    download modules to local cache\n    edit        edit go.mod from tools or scripts\n    graph       print module requirement graph\n    init        initialize new module in current directory\n    tidy        add missing and remove unused modules\n    vendor      make vendored copy of dependencies\n    verify      verify dependencies have expected content\n    why         explain why packages or modules are needed\n")])])]),e("p",[t._v("常用命令")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("go list -m all")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("列出当前模块依赖的所有模块")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("go list -u -m all")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("列出当前模块依赖中可升级的模块")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("go get -u")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("升级所有依赖至最新版本")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("go get -u=patch")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("升级所有依赖至最新的修订版本")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("go mod tidy")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("清理未使用/生效的依赖")])])])]),t._v(" "),e("h2",{attrs:{id:"_2-go-mod-文件语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-go-mod-文件语法"}},[t._v("#")]),t._v(" 2. go.mod 文件语法")]),t._v(" "),e("p",[t._v("在目前的版本当中，"),e("code",[t._v("go.mod")]),t._v(" 文件中主要有四个部分组成：")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("module")])])]),t._v(" "),e("p",[t._v("用来声明当前 "),e("code",[t._v("module")]),t._v("，如果当前版本大于 v1 的话，还需要在尾部显式的声明 "),e("code",[t._v("/vN")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("module /path/to/your/mod/v2\n\nmodule github.com/Xuanwo/go-mod-intro/v2\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[t._v("require")])])]),t._v(" "),e("p",[t._v("这是最为常用的部分，在 mod 之后可以写任意有效的、能指向一个引用的字符串，比如 Tag，Branch，Commit 或者是使用 "),e("code",[t._v("latest")]),t._v(" 来表示引用最新的 commit。如果对应的引用刚好是一个 Tag 的话，这个字符串会被重写为对应的 tag；如果不是的话，这个字符串会被规范化为形如 "),e("code",[t._v("v2.0.0-20180128182452-d3ae77c26ac8")]),t._v(" 这样的字符串。我们后面会发现这个字符串与底层的 mod 存储形式是相对应的。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("require /your/mod tag/branch/commit\n\nrequire github.com/google/go-github/v24 v24.0.1\nrequire gopkg.in/urfave/cli.v2 v2.0.0-20180128182452-d3ae77c26ac8\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[t._v("replace")])])]),t._v(" "),e("p",[e("code",[t._v("replace")]),t._v("这边的花样比较多，主要是两种，一个是与 "),e("code",[t._v("require")]),t._v(" 类似，可以指向另外一个 repo，另一种是可以指向本地的一个目录。加了 "),e("code",[t._v("replace")]),t._v(" 的话，go 在编译的时候就会使用对应的项目代码来替换。需要注意的是这个只作用于当前模块的构建，其他模块的 replace 对它不生效，同理，它的 replace 对其他模块也不会生效。")]),t._v(" "),e("p",[t._v("需要额外注意的是，如果引用一个本地路径的话，那这个目录下必须要有 "),e("code",[t._v("go.mod")]),t._v(" 文件，这个目录可以是绝对路径，也可以是相对路径。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("replace original_name => real_name tag/branch/commit\nreplace original_name => local_path\n\n\nreplace test.dev/common => git.example.com/bravo/common.git v0.0.0-20190520075948-958a278528f8\nreplace test.dev/common => ../../another-porject/common-go\nreplace github.com/qiniu/x => github.com/Xuanwo/qiniu_x v0.0.0-20190416044656-4dd63e731f37\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("ol",{attrs:{start:"4"}},[e("li",[e("strong",[t._v("exclude")])])]),t._v(" "),e("p",[t._v("这个用的比较少，主要是为了能在构建的时候排除掉特定的版本，跟 "),e("code",[t._v("replace")]),t._v(" 一样，只能作用于当前模块的构建。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("exclude /your/mod tag/branch/commit\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"_3-版本选择"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-版本选择"}},[t._v("#")]),t._v(" 3. 版本选择")]),t._v(" "),e("p",[t._v("Go Module 使用的最小版本选择（Minimal Version Selection）算法。我们为每个模块指定的依赖都是可用于构建的最低版本，最后实际选择的版本是所有出现过的最低版本中的最大值。")]),t._v(" "),e("p",[t._v("在 require 中指定的版本为依赖的最小版本号，所以最后会选择使用在所有依赖选择中出现最高版本。")]),t._v(" "),e("h2",{attrs:{id:"_4-语义导入版本控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-语义导入版本控制"}},[t._v("#")]),t._v(" 4. 语义导入版本控制")]),t._v(" "),e("p",[t._v("这就为我们带来了语义导入版本控制（Semantic Import Versioning）。")]),t._v(" "),e("p",[t._v("例：V1.2.3")]),t._v(" "),e("ul",[e("li",[t._v("1 为主版本号")]),t._v(" "),e("li",[t._v("2 为次版本号")]),t._v(" "),e("li",[t._v("3 为补丁版本号")])]),t._v(" "),e("p",[t._v("当主版本号大于 1 时，这个 Module 的 import path 必须在尾部加上 "),e("strong",[t._v("/vN")])]),t._v(" "),e("ul",[e("li",[t._v("在 go.mod 文件中： "),e("code",[t._v("module github.com/my/mod/v2")])]),t._v(" "),e("li",[t._v("在 require 的时候： "),e("code",[t._v("require github.com/my/mod/v2 v2.0.0")])]),t._v(" "),e("li",[t._v("在 import 的时候： "),e("code",[t._v('import "github.com/my/mod/v2/mypkg"')])])]),t._v(" "),e("p",[t._v("当主版本号为 "),e("code",[t._v("v0")]),t._v(" 或者 "),e("code",[t._v("v1")]),t._v(" 时，尾部的 "),e("code",[t._v("/v0")]),t._v(" 或 "),e("code",[t._v("/v1")]),t._v(" 可以省略。")]),t._v(" "),e("h2",{attrs:{id:"_5-伪版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-伪版本"}},[t._v("#")]),t._v(" 5. 伪版本")]),t._v(" "),e("p",[t._v("对于 go.mod 中形如下面的版本依赖，称为伪版本")]),t._v(" "),e("div",{staticClass:"language-go line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[t._v("tygit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("touch4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("me"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rich"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("joy"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("common v1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.3")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.20210419065331")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("0543c5926b64\ngithub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("labstack"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("echo v3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.10")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("incompatible\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("更多伪版本格式如下：")]),t._v(" "),e("ul",[e("li",[t._v("· Vx.0.0-yyyymmddhhmms-abcdefxyz 当在目标提交之前没有使用适当的主版本进行早期版本提交时")]),t._v(" "),e("li",[t._v("· vX.Y.Z-pre.0.yyyymmddhhmms -abcdefxyz 当目标提交之前的最新版本提交是 vX.Y.Z-pre 时")]),t._v(" "),e("li",[t._v("· vX.Y.(Z + 1) 0.yyyymmddhhmms -abcdefxyz 当目标提交之前的最新版本提交是 vX.Y.Z 时")])]),t._v(" "),e("p",[t._v("作为一种最佳实践，伪版本字符串不应该是手工输入的。go 命令将接受普通的提交散列并自动将其转换为伪版本。此方法有助于根据生成的时间戳比较修订。")]),t._v(" "),e("p",[t._v("例如，一个 go get 命令可能只使用模块查询的提交散列(githash):3")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("% go get tygit.touch4.me/rich-joy/common@0543c5926b6441fdd31c9bd260f18809d65e7367\ngo: tygit.touch4.me/rich-joy/common 0543c5926b6441fdd31c9bd260f18809d65e7367 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v1.6.3-0.20210419065331-0543c5926b64\ngo: downloading tygit.touch4.me/rich-joy/common v1.6.3-0.20210419065331-0543c5926b64\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最后版本依赖被更新为：")]),t._v("\ntygit.touch4.me/rich-joy/common v1.6.3-0.20210419065331-0543c5926b64\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("在本地开发中推荐使用"),e("strong",[t._v("replace")]),t._v("，但提交代码时对于不能马上生成 tag 时，推荐使用"),e("strong",[t._v("伪版本")])])])}),[],!1,null,null,null);e.default=r.exports}}]);